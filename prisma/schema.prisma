// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Question {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  userId      String
  content     String
  description String
  upvoteCount Int       @default(0)
  answers     Answer[]
  topicId     String?   @db.ObjectId
  topic       Topic?    @relation(fields: [topicId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
}

model Answer {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  userId        String
  questionId    String          @db.ObjectId
  answer        String
  upvoteCount   Int             @default(0)
  question      Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  userFirstName String
  userLastName  String
  userFullName  String
  topicId       String?         @db.ObjectId
  topic         Topic?          @relation(fields: [topicId], references: [id])
  comments      AnswerComment[]
  isSolution    Boolean         @default(false)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  deletedAt     DateTime?

  @@unique([questionId, isSolution]) // Unique constraint to ensure only one solution per question
}

enum ChallengeQuestionStatus {
  PENDING
  PUBLISHED
  ARCHIVED
}

model ChallengeQuestion {
  id               String                   @id @default(auto()) @map("_id") @db.ObjectId
  content          String
  creatorId        String?
  approvedBy       String?
  status           ChallengeQuestionStatus? @default(PENDING)
  options          AnswerOption[]
  topic            Topic?                   @relation(fields: [topicId], references: [id])
  articleId        String?                  @db.ObjectId
  articleSectionId String?                  @db.ObjectId
  articleSection   ArticleSection?          @relation(fields: [articleSectionId], references: [id])
  article          Article?                 @relation(fields: [articleId], references: [id])
  topicId          String?                  @db.ObjectId
  chapter          Chapter?                 @relation(fields: [chapterId], references: [id])
  chapterId        String?                  @db.ObjectId
  hint             String?
  explanation      String?
  deletedAt        DateTime?
  createdAt        DateTime                 @default(now())
  updatedAt        DateTime                 @updatedAt
}

model AnswerOption {
  id                  String            @id @default(auto()) @map("_id") @db.ObjectId
  challengeQuestionId String            @db.ObjectId
  content             String
  isCorrect           Boolean           @default(false)
  question            ChallengeQuestion @relation(fields: [challengeQuestionId], references: [id])
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
}

model Topic {
  id        String              @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  questions ChallengeQuestion[]
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  Question  Question[]
  Answer    Answer[]
  Article   Article[]
}

model Chapter {
  id        String              @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  questions ChallengeQuestion[]
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
}

model Tag {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Article   Article? @relation("ArticleTags", fields: [articleId], references: [id])
  articleId String?  @db.ObjectId
}

model Competition {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  questionIds     String[]
  title           String
  description     String?
  challengerId    String
  challengeeId    String
  challengerScore Int
  challengeeScore Int?
  status          String   @default("pending")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

enum NotificationType {
  CHALLENGE
  ANSWER
  QUESTION
  UPVOTE_QUESTION
  UPVOTE_ANSWER
  UPVOTE_ARTICLE
  UPVOTE_COMMENT
}

model Notification {
  id            String           @id @default(auto()) @map("_id") @db.ObjectId
  userId        String
  message       String
  read          Boolean          @default(false)
  type          NotificationType
  competitionId String?          @db.ObjectId
  postId        String?          @db.ObjectId
  answerId      String?          @db.ObjectId
  questionId    String?          @db.ObjectId
  articleId     String?          @db.ObjectId
  commentId     String?          @db.ObjectId
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
}

model Upvote {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String
  answerId   String?  @db.ObjectId
  questionId String?  @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  articleId  String?  @db.ObjectId
  commentId  String?  @db.ObjectId
  Article    Article? @relation("ArticleUpvotes", fields: [articleId], references: [id])

  @@unique([userId, answerId])
  @@unique([userId, questionId])
  @@unique([userId, articleId])
  @@unique([userId, commentId])
}

model View {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String?
  ipAddress  String?
  answerId   String?  @db.ObjectId
  questionId String?  @db.ObjectId
  count      Int      @default(1)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  articleId  String?  @db.ObjectId

  @@unique([userId, answerId], name: "user_answer_unique")
  @@unique([userId, questionId], name: "user_question_unique")
  @@unique([ipAddress, answerId], name: "ip_answer_unique")
  @@unique([ipAddress, questionId], name: "ip_question_unique")
  @@unique([userId, articleId], name: "user_article_unique")
}

model Article {
  id           String           @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  content      String?
  authorId     String
  comments     Comment[]        @relation("ArticleComments")
  upvotes      Upvote[]         @relation("ArticleUpvotes")
  tags         Tag[]            @relation("ArticleTags")
  topicId      String           @db.ObjectId
  topic        Topic            @relation(fields: [topicId], references: [id])
  blogSeriesId String?          @db.ObjectId
  blogSeries   BlogSeries?      @relation(fields: [blogSeriesId], references: [id])
  sections     ArticleSection[]
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  deletedAt    DateTime?

  ChallengeQuestion ChallengeQuestion[]
}

model ArticleSection {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  content   String
  authorId  String
  position  Int
  articleId String    @db.ObjectId
  article   Article   @relation(fields: [articleId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  ChallengeQuestion ChallengeQuestion[]
}

model Comment {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  authorId  String
  articleId String    @db.ObjectId
  article   Article   @relation("ArticleComments", fields: [articleId], references: [id], onDelete: Cascade)
  parentId  String?   @db.ObjectId
  parent    Comment?  @relation("NestedComments", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Comment[] @relation("NestedComments")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([parentId], name: "parentIdIndex")
}

enum Badge {
  HARDWORKER
  CURIOUS
  HELPER
  EXPERT
  LEARNER
  INNOVATOR
  COLLABORATOR
  ENTHUSIAST
  PIONEER
  MENTOR
  VERIFIED
}

model Profile {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  fullName      String?
  clerkUserId   String?  @unique
  bio           String?
  referralCount Int      @default(0)
  level         Int      @default(0)
  rewardCount   Int      @default(5)
  badge         Badge[]
  address       String?
  grade         Int?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  CheckIn CheckIn[]
}

model Refer {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  referrerId String
  refereeId  String
  referredAt DateTime @default(now())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model AnswerComment {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  userId    String
  answerId  String?   @db.ObjectId
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  Answer    Answer?   @relation(fields: [answerId], references: [id])
}

model BlogSeries {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  userId      String
  title       String
  description String?
  articles    Article[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
}

model CheckIn {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique
  createdAt DateTime @default(now())
  bonus     Int
  user      Profile  @relation(fields: [userId], references: [clerkUserId])

  @@index([userId, createdAt])
}
