// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Question {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  userId              String
  questionTitle       String
  questionDescription String
  upvoteCount         Int      @default(0)
  answers             Answer[]
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  userFirstName       String
  userLastName        String
  userFullName        String
}

model Answer {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  userId        String
  questionId    String   @db.ObjectId
  answer        String
  upvoteCount   Int      @default(0)
  question      Question @relation(fields: [questionId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userFirstName String
  userLastName  String
  userFullName  String
}

model Quiz {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  description     String?
  topic           String?
  chapter         String?
  questions       QuizQuestion[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  Competition     Competition[]
}

model QuizQuestion {
  id        String         @id @default(auto()) @map("_id") @db.ObjectId
  quizId    String         @db.ObjectId
  content   String
  options   AnswerOption[]
  quiz      Quiz           @relation(fields: [quizId], references: [id])
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model AnswerOption {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  questionId String       @db.ObjectId
  content    String
  isCorrect  Boolean      @default(false)
  question   QuizQuestion @relation(fields: [questionId], references: [id])
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

model Competition {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  description     String?
  quizId          String   @db.ObjectId
  challengerId    String
  challengeeId    String
  challengerScore Int
  challengeeScore Int?
  status          String   @default("pending")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  quiz            Quiz     @relation(fields: [quizId], references: [id])
}

enum NotificationType {
  CHALLENGE
  ANSWER
  QUESTION
  UPVOTE_QUESTION
  UPVOTE_ANSWER
}

model Notification {
  id            String           @id @default(auto()) @map("_id") @db.ObjectId
  userId        String
  message       String
  read          Boolean          @default(false)
  type          NotificationType
  competitionId String?          @db.ObjectId
  postId        String?          @db.ObjectId
  answerId      String?          @db.ObjectId
  questionId    String?          @db.ObjectId
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
}

model Upvote {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String
  answerId   String?  @db.ObjectId
  questionId String?  @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([userId, answerId])
  @@unique([userId, questionId])
}

model View {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String?
  ipAddress  String?
  answerId   String?  @db.ObjectId
  questionId String?  @db.ObjectId
  count      Int      @default(1)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([userId, answerId], name: "user_answer_unique")
  @@unique([userId, questionId], name: "user_question_unique")
  @@unique([ipAddress, answerId], name: "ip_answer_unique")
  @@unique([ipAddress, questionId], name: "ip_question_unique")
}
